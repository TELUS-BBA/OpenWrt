From a44e6e02852a6bc99a9f244bc1875ff42f52ab26 Mon Sep 17 00:00:00 2001
From: Marko Ratkaj <marko.ratkaj@sartura.hr>
Date: Tue, 18 Sep 2018 15:00:28 +0200
Subject: [PATCH] clearfog base: pci ioremap fix

Signed-off-by: Marko Ratkaj <marko.ratkaj@sartura.hr>
---
 arch/arm/include/asm/io.h          |  1 +
 arch/arm/mm/ioremap.c              |  7 +++++++
 drivers/pci/controller/pci-mvebu.c | 36 +++++++++++++++++++++++++++++++-----
 3 files changed, 39 insertions(+), 5 deletions(-)

--- a/arch/arm/include/asm/io.h
+++ b/arch/arm/include/asm/io.h
@@ -185,6 +185,7 @@
 #endif
 
 extern int pci_ioremap_io(unsigned int offset, phys_addr_t phys_addr);
+extern void pci_unmap_io(unsigned int offset);
 
 /*
  * PCI configuration space mapping function.
--- a/arch/arm/mm/ioremap.c
+++ b/arch/arm/mm/ioremap.c
@@ -482,6 +482,13 @@
 }
 EXPORT_SYMBOL_GPL(pci_ioremap_io);
 
+void pci_unmap_io(unsigned int offset)
+{
+	BUG_ON(offset + SZ_64K > IO_SPACE_LIMIT);
+	unmap_kernel_range(PCI_IO_VIRT_BASE + offset, SZ_64K);
+}
+EXPORT_SYMBOL_GPL(pci_unmap_io);
+
 void __iomem *pci_remap_cfgspace(resource_size_t res_cookie, size_t size)
 {
 	return arch_ioremap_caller(res_cookie, size, MT_UNCACHED,
--- a/drivers/pci/controller/pci-mvebu.c
+++ b/drivers/pci/controller/pci-mvebu.c
@@ -1152,7 +1152,6 @@
 {
 	struct device *dev = &pcie->pdev->dev;
 	struct device_node *np = dev->of_node;
-	unsigned int i;
 	int ret;
 
 	INIT_LIST_HEAD(&pcie->resources);
@@ -1186,15 +1185,34 @@
 					 resource_size(&pcie->io) - 1);
 		pcie->realio.name = "PCI I/O";
 
-		for (i = 0; i < resource_size(&pcie->realio); i += SZ_64K)
-			pci_ioremap_io(i, pcie->io.start + i);
-
 		pci_add_resource(&pcie->resources, &pcie->realio);
 	}
 
 	return devm_request_pci_bus_resources(dev, &pcie->resources);
 }
 
+static void mvebu_pcie_map_io(struct mvebu_pcie *pcie)
+{
+	int i;
+
+	if (resource_size(&pcie->io) == 0)
+		return;
+
+	for (i = 0; i < resource_size(&pcie->realio); i += SZ_64K)
+		pci_ioremap_io(i, pcie->io.start + i);
+}
+
+static void mvebu_pcie_unmap_io(struct mvebu_pcie *pcie)
+{
+	int i;
+
+	if (resource_size(&pcie->io) == 0)
+		return;
+
+	for (i = 0; i < resource_size(&pcie->realio); i += SZ_64K)
+		pci_unmap_io(i);
+}
+
 static int mvebu_pcie_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -1266,6 +1284,8 @@
 
 	pcie->nports = i;
 
+	mvebu_pcie_map_io(pcie);
+
 	list_splice_init(&pcie->resources, &bridge->windows);
 	bridge->dev.parent = dev;
 	bridge->sysdata = pcie;
@@ -1276,7 +1296,13 @@
 	bridge->align_resource = mvebu_pcie_align_resource;
 	bridge->msi = pcie->msi;
 
-	return pci_host_probe(bridge);
+	ret = pci_host_probe(bridge);
+	if (ret) {
+		mvebu_pcie_unmap_io(pcie);
+		return ret;
+	}
+
+	return 0;
 }
 
 static const struct of_device_id mvebu_pcie_of_match_table[] = {
